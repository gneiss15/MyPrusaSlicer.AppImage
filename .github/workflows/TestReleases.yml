name: Test Releases
on:
  workflow_dispatch:
  push:
permissions:
  actions: write
  contents: write
defaults:
  run:
    shell: bash
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  linux:
    runs-on: ubuntu-latest
    #timeout-minutes: 180
    steps:
    - name: Setup Env
      run: |
        #set -x
        THIS_REPO_DIR=${GITHUB_WORKSPACE}/${GITHUB_REPOSITORY##*/}
        APT_CACHE_DIR=${THIS_REPO_DIR}/cache/var/cache/apt
        TOOLS_DIR=${THIS_REPO_DIR}/.github/tools
        PRUSA_REPO_DIR=${GITHUB_WORKSPACE}/PrusaSlicer

        for i in THIS_REPO_DIR APT_CACHE_DIR TOOLS_DIR PRUSA_REPO_DIR; do
          eval "r=\"\$$i\""
          echo "$i=$r" >> $GITHUB_ENV
        done

    - name: Check Releases and Skip Rest of Jobs if no new release
      id: Check_Releases
      run: |
        set -x
        set -v
        GetReleases()
         {
          list=$(gh release list -R "$1" --json tagName | jq -r 'map(select(true))[] | (.tagName)' | sed s/version_//g)
          tmpfile=mktemp
          touch $tmpfile
          for i in $list; do
            if [[ $i != *-* ]] && dpkg --compare-versions $i "ge" "2.9"; then 
              echo $i >>$tmpfile
            fi
          done
          sort <$tmpfile >$2
          rm -f $tmpfile
         }
         
        THIS_REPO=$GITHUB_REPOSITORY
        PRUSA_REPO=prusa3d/PrusaSlicer
        
        cd "$GITHUB_WORKSPACE"
        GetReleases "$PRUSA_REPO" "./Prusa.Releases"
        GetReleases "$THIS_REPO" "./This.Releases"
        VERSION=$(head -1 <<< "$(comm -23 Prusa.Releases This.Releases)")
        rm -f "./Prusa.Releases" "./This.Releases"
        
        if [ -z "${VERSION}" ]; then
          echo "No new release found. Skipping rest of workflow."
          echo "skip=true" >> $GITHUB_OUTPUT
         else
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=version_${VERSION}" >> $GITHUB_OUTPUT
          echo "New release found: ${VERSION}"
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Show1
      run: |
        set -x
        set -v
        echo steps.Check_Releases.outputs.skip: ${{ steps.Check_Releases.outputs.skip }}
        if ${{ steps.Check_Releases.outputs.skip }}; then
          echo true
         else
          echo false
        fi

    - name: Show2
      if: ! ${{ steps.Check_Releases.outputs.skip }} 
      run: |
        echo Not skipped

    - name: Show3
      if: ${{ ! steps.Check_Releases.outputs.skip }} 
      run: |
        echo Not skipped

